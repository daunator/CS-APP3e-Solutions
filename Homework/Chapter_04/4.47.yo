                            | # Execution begins at address 0 
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp  	# Set up stack pointer
0x00a: 803800000000000000   | 	call main		# Execute main program
0x013: 00                   | 	halt			# Terminate program 
                            | 
                            | # Array of 4 elements
0x018:                      | 	.align 8
0x018: 00a000a000a00000     | array:	.quad 0xa000a000a000
0x020: 0d000d000d000000     | 	.quad 0x000d000d000d
0x028: c000c000c0000000     | 	.quad 0x00c000c000c0
0x030: 000b000b000b0000     | 	.quad 0x0b000b000b00
                            | 	
                            | 
0x038: 30f71800000000000000 | main:	irmovq array,%rdi
0x042: 30f60400000000000000 | 	irmovq $4,%rsi
0x04c: 806900000000000000   | 	call bubble_sort	# bubble_sort(array, 4)
0x055: 30f60400000000000000 |         irmovq $4,%rsi
0x05f: 800101000000000000   |         call sort_test		# sort_test(array, 4)
0x068: 90                   | 	ret
                            | 
                            | # void bubble_sort(long *data, long count)
                            | # data in %rdi, count in %rsi
0x069:                      | bubble_sort:
0x069: 30fb0100000000000000 |         irmovq  $1, %r11
0x073: 30fc0800000000000000 |         irmovq  $8, %r12
0x07d: 61b6                 |         subq    %r11, %rsi	# last = count-1
0x07f: 70f500000000000000   |         jmp     last_test
0x088:                      | loop:
0x088: 2079                 |         rrmovq  %rdi, %r9
0x08a: 6089                 |         addq    %r8, %r9
0x08c: 50190000000000000000 |         mrmovq  (%r9), %rcx
0x096: 209a                 |         rrmovq  %r9, %r10
0x098: 60ca                 |         addq    %r12, %r10	# +8
0x09a: 502a0000000000000000 |         mrmovq  (%r10), %rdx
0x0a4: 202d                 |         rrmovq  %rdx, %r13
0x0a6: 611d                 |         subq    %rcx, %r13
0x0a8: 75c500000000000000   |         jge     skip
0x0b1: 40290000000000000000 |         rmmovq  %rdx, (%r9)
0x0bb: 401a0000000000000000 |         rmmovq  %rcx, (%r10)
0x0c5:                      | skip:
0x0c5: 60b0                 |         addq    %r11, %rax	# +=1
0x0c7: 60c8                 |         addq    %r12, %r8	# +=8
0x0c9: 70e600000000000000   |         jmp     loop_test
0x0d2:                      | init_loop:
0x0d2: 30f00000000000000000 |         irmovq    $0, %rax	# i
0x0dc: 30f80000000000000000 |         irmovq    $0, %r8	# i*8
0x0e6:                      | loop_test:
0x0e6: 200d                 |         rrmovq   %rax, %r13
0x0e8: 616d                 |         subq     %rsi, %r13
0x0ea: 728800000000000000   |         jl       loop
0x0f3: 61b6                 |         subq     %r11, %rsi
0x0f5:                      | last_test:
0x0f5: 6266                 |         andq     %rsi, %rsi
0x0f7: 76d200000000000000   |         jg       init_loop
0x100: 90                   |         ret
                            | 
                            | # void sort_test(long *data, long count)
                            | # data in %rdi, count in %rsi
0x101:                      | sort_test:
0x101: 6388                 | 	xorq    %r8, %r8
0x103: 30f00000000000000000 |         irmovq  $0, %rax
0x10d: 30fb0100000000000000 |         irmovq  $1, %r11
0x117: 30fc0800000000000000 |         irmovq  $8, %r12
0x121: 61b6                 |         subq    %r11, %rsi
0x123: 705501000000000000   |         jmp     loop2_test
0x12c:                      | loop2:
0x12c: 2072                 |         rrmovq  %rdi, %rdx
0x12e: 6082                 |         addq    %r8, %rdx
0x130: 50920000000000000000 |         mrmovq  $0(%rdx), %r9
0x13a: 60c2                 |         addq    %r12, %rdx
0x13c: 50a20000000000000000 |         mrmovq  $0(%rdx), %r10
0x146: 619a                 |         subq    %r9, %r10
0x148: 726d01000000000000   |         jl      bad_order
0x151: 60b0                 |         addq    %r11, %rax	# +=1
0x153: 60c8                 |         addq    %r12, %r8	# +=8
0x155:                      | loop2_test:
0x155: 2009                 |         rrmovq  %rax, %r9
0x157: 6169                 |         subq    %rsi, %r9
0x159: 722c01000000000000   |         jl      loop2
0x162: 30f00000000000000000 |         irmovq  $0, %rax
0x16c: 90                   |         ret
0x16d:                      | bad_order:
0x16d: 30f00100000000000000 |         irmovq  $1, %rax
0x177: 90                   |         ret
                            | 
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      | 	.pos 0x200
0x200:                      | stack:
